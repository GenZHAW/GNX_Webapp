# This is a basic workflow to help you get started with Actions
name: CI-CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
          npm ci 

      # test the apps
      - name: build
        run: |
          npx jest

  push_to_Docker_Hub:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # build docker image and push to docker hub
    # only if the app build and test successfully
    needs: [ build_test ]

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/genetix:latest

      - name: Run the image in a container
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/genetix:latest
          run: |
            echo "runing the docker image"
            echo "Testing the nodejs  app endpoints"
            echo ${{ steps.docker_build.outputs.digest }}

      - name: Deploy to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker pull jsonderulo/genetix:latest
            docker stop gnxcontainer || true
            docker rm gnxcontainer || true          
            
            echo "DB_USER=${{ secrets.DB_USER }}" > /home/genetix/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/genetix/.env
            echo "DB_HOST=84.72.104.89" >> /home/genetix/.env
            echo "DB_PORT=5432" >> /home/genetix/.env
            echo "DB_DATABASE_DEV=teamgenetix" >> /home/genetix/.env
            echo "DB_DATABASE_PROD=teamgenetix" >> /home/genetix/.env
            echo "EMAIL_HOST=${{ secrets.MAIL_HOST }}" >> /home/genetix/.env
            echo "EMAIL_PORT=587" >> /home/genetix/.env
            echo "EMAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> /home/genetix/.env
            echo "EMAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> /home/genetix/.env
            echo "RESET_PASSWORD_TOKEN_EXPIRATION_TIME=3600" >> /home/genetix/.env
            echo "FILESHARE_ROOT_DIR=/filestorage" >> /home/genetix/.env
            echo "ADDRESS=localhost" >> /home/genetix/.env
            docker run -d --name gnxcontainer --network=host -v "/home/genetix/.env:/usr/src/app/.env" jsonderulo/genetix:latest
      
      
      
      
      
      
      
      
      
      
